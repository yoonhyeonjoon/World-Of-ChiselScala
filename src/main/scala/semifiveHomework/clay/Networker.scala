package semifiveHomework.clay


import Chisel.Decoupled
import chisel3.fromBooleanToLiteral
import chisel3.tester.{testableClock, testableData}
import chiseltest.RawTester.test

import java.awt.image.BufferedImage
import java.io.File
import javax.imageio.ImageIO
import chisel3._
import chisel3.util.DecoupledIO


case class CoreModuleParams(numberOfLinkers:Int = 4)
class CoreModule(coreModuleParams:CoreModuleParams) extends Module {

  class CoreModuleBundle extends Bundle {
    val initialSetter : Bool = Input(Bool())
    val inFlux: Vec[DecoupledIO[Bool]] = Vec(coreModuleParams.numberOfLinkers, Flipped(Decoupled(Bool())))
    val outFlux: Vec[DecoupledIO[Bool]] = Vec(coreModuleParams.numberOfLinkers, Decoupled(Bool()))
    val outputLooker: Bool = Output(Bool())
  }

  /**해당 위치에서 구현**/
  val io = IO(new CoreModuleBundle)

  // state parameter
  val inoutMode = false.B
  val calculateMode = true.B

  // mode
  val state = RegInit(io.initialSetter)
  val mode = RegInit(inoutMode)

  //  val inputTrueCount = io.inFlux.reduce{_.bits.asUInt +& _.bits.asUInt}
  val inputTrueCount = io.inFlux(0).bits.asUInt +& io.inFlux(1).bits.asUInt +& io.inFlux(2).bits.asUInt +& io.inFlux(3).bits.asUInt

  // update mode (sense the change of input)
  when(mode === inoutMode) {
    when (state === true.B) {
      when ((inputTrueCount === 0.U) || (inputTrueCount === 4.U)) {
        mode := calculateMode
      }
        .otherwise {
          mode := mode
        }
    }
      .otherwise {
        when ((inputTrueCount === 2.U) || (inputTrueCount === 4.U)) {
          mode := calculateMode
        }
          .otherwise {
            mode := mode
          }
      }
  }
    .elsewhen(mode === calculateMode) {
      mode := inoutMode
    }

  // update inFlux.ready and state
  when(mode === inoutMode) {
    io.inFlux foreach(in => in.ready := true.B)
  }
    .otherwise {
      io.inFlux foreach(in => in.ready := false.B)

      // state transition
      state := ~state
    }

  // update outFlux.valid and outFlux.bits
  io.outFlux foreach(out => out.valid := true.B)
  io.outFlux foreach(out => out.bits := state)

  io.outputLooker := state

}


case class NetworkerParams(width:Int=100, height:Int=100)
class NetWorker(networkerParams: NetworkerParams) extends Module {

  class NetWorkerBundle extends Bundle {
    //    val startSignal : Bool = Input(Bool())
    val initialSetterSet : UInt = Input(UInt((networkerParams.width * networkerParams.height).W))
    val frameOutput : UInt = Output(UInt((networkerParams.width * networkerParams.height).W))
  }

  /**해당 위치에서 구현**/
  val io = IO(new NetWorkerBundle)

  val coreFrame = VecInit(Seq.fill(networkerParams.width * networkerParams.height)(Module(new CoreModule(CoreModuleParams())).io))

  for (i <- 0 until networkerParams.height) {
    for (j <- 0 until networkerParams.width) {
      if (j == (networkerParams.width - 1)) {
        coreFrame(networkerParams.width * i + j).inFlux(0).bits := coreFrame(networkerParams.width * i).outFlux(2).bits
        coreFrame(networkerParams.width * i + j).inFlux(0).valid := coreFrame(networkerParams.width * i).outFlux(2).valid
        coreFrame(networkerParams.width * i).outFlux(2).ready := coreFrame(networkerParams.width * i + j).inFlux(0).ready

        coreFrame(networkerParams.width * i).inFlux(2).bits := coreFrame(networkerParams.width * i + j).outFlux(0).bits
        coreFrame(networkerParams.width * i).inFlux(2).valid := coreFrame(networkerParams.width * i + j).outFlux(0).valid
        coreFrame(networkerParams.width * i + j).outFlux(0).ready := coreFrame(networkerParams.width * i).inFlux(2).ready
      }
      else {
        coreFrame(networkerParams.width * i + j).inFlux(0).bits := coreFrame(networkerParams.width * i + j + 1).outFlux(2).bits
        coreFrame(networkerParams.width * i + j).inFlux(0).valid := coreFrame(networkerParams.width * i + j + 1).outFlux(2).valid
        coreFrame(networkerParams.width * i + j + 1).outFlux(2).ready := coreFrame(networkerParams.width * i + j).inFlux(0).ready

        coreFrame(networkerParams.width * i + j + 1).inFlux(2).bits := coreFrame(networkerParams.width * i + j).outFlux(0).bits
        coreFrame(networkerParams.width * i + j + 1).inFlux(2).valid := coreFrame(networkerParams.width * i + j).outFlux(0).valid
        coreFrame(networkerParams.width * i + j).outFlux(0).ready := coreFrame(networkerParams.width * i + j + 1).inFlux(2).ready
      }
    }
  }

  for (i <- 0 until networkerParams.width) {
    for (j <- 0 until networkerParams.height) {
      if (j == (networkerParams.height - 1)) {
        coreFrame(networkerParams.width * j + i).inFlux(1).bits := coreFrame(i).outFlux(3).bits
        coreFrame(networkerParams.width * j + i).inFlux(1).valid := coreFrame(i).outFlux(3).valid
        coreFrame(i).outFlux(3).ready := coreFrame(networkerParams.width * j + i).inFlux(1).ready

        coreFrame(i).inFlux(3).bits := coreFrame(networkerParams.width * j + i).outFlux(1).bits
        coreFrame(i).inFlux(3).valid := coreFrame(networkerParams.width * j + i).outFlux(1).valid
        coreFrame(networkerParams.width * j + i).outFlux(1).ready := coreFrame(i).inFlux(3).ready
      }
      else {
        coreFrame(networkerParams.width * j + i).inFlux(1).bits := coreFrame(networkerParams.width * (j + 1) + i).outFlux(3).bits
        coreFrame(networkerParams.width * j + i).inFlux(1).valid := coreFrame(networkerParams.width * (j + 1) + i).outFlux(3).valid
        coreFrame(networkerParams.width * (j + 1) + i).outFlux(3).ready := coreFrame(networkerParams.width * j + i).inFlux(1).ready

        coreFrame(networkerParams.width * (j + 1) + i).inFlux(3).bits := coreFrame(networkerParams.width * j + i).outFlux(1).bits
        coreFrame(networkerParams.width * (j + 1) + i).inFlux(3).valid := coreFrame(networkerParams.width * j + i).outFlux(1).valid
        coreFrame(networkerParams.width * j + i).outFlux(1).ready := coreFrame(networkerParams.width * (j + 1) + i).inFlux(3).ready
      }
    }
  }


  // startSignal 조건

  // initialSetterSet -> CoreModule의 initialSetter에 할당
  for (i <- 0 until networkerParams.height) {
    for (j <- 0 until networkerParams.width) {
      coreFrame(networkerParams.width * i + j).initialSetter := io.initialSetterSet(networkerParams.width * i + j)
    }
  }

  val outputWire = Wire(Vec((networkerParams.width * networkerParams.height), UInt()))

  for (i <- 0 until networkerParams.height) {
    for (j <- 0 until networkerParams.width) {
      outputWire(networkerParams.width * i + j) := coreFrame(networkerParams.width * i + j).outputLooker
    }
  }

  io.frameOutput := outputWire.asUInt
}



// Add extends App
object NetworkerRunner extends App {

  object PaddingZero {
    def padLeftZeros(inputString: String, length: Int): String = {
      import scala.collection.mutable
      if (inputString.length >= length) return inputString
      val sb: mutable.StringBuilder = new mutable.StringBuilder
      while ( {
        sb.length < length - inputString.length
      }) sb.append('0')
      sb.append(inputString)
      sb.toString
    }
  }

  def getBinary(idx:Int, input:String): Unit ={
    val width = 100
    val height = 100
    val output = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_BINARY)

    val filtered = input.split('(')(1).split(')')(0)
    val binaried = BigInt.apply(filtered).toString(2)
    val padded = PaddingZero.padLeftZeros(binaried, 100*100)
    println(padded)
    for (idx <- 0 until padded.length)
    {
      val idxWidth = idx % width
      val idxHeight = idx / width
      //      val idxWidth = width - (idx % width) - 1
      //      val idxHeight = height - (idx / width) - 1
      output.setRGB(idxWidth, idxHeight, if(padded(idx) == '1') 0 else (255*255*255*255) & 0xffffff)
    }

    //Error가 난다면, 아래 imgSet/ .. 의 경로를 최상위 패키지에 생성하거나 imgSet를 빼시면됩니다.
    ImageIO.write(output, "jpg", new File(s"${idx}.jpg"))
  }


  test(new NetWorker(NetworkerParams())){ c =>
    c.io.initialSetterSet.poke("
    println("[Start]")
    c.reset.poke(true.B)
    c.clock.step()
    c.clock.step()
    c.reset.poke(false.B)
    c.clock.step()
    (1 to 999).foreach{idx =>
      println(s"processed : ${idx}")
      getBinary(idx, c.io.frameOutput.peek().toString())
      c.clock.step()
    }
  }

}
